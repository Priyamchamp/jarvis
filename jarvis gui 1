import datetime
import os
import random
import sys
import webbrowser

import pyautogui
import pyttsx3
import requests
import speech_recognition
from bs4 import BeautifulSoup
from PyQt5 import QtGui,QtWidgets,QtCore
from PyQt5.QtCore import QTimer,QTime, QDate,Qt
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.uic import loadUiType
from jarvisUi import Ui_MainWindow

engine = pyttsx3.init("sapi5")
voices = engine.getProperty("voices")
engine.setProperty("voice", voices[0].id)
rate = engine.setProperty("rate",170)

def speak(audio):
    engine.say(audio)
    engine.runAndWait()



def alarm(query):
    timehere = open("Alarmtext.txt","a")
    timehere.write(query)
    timehere.close()
    os.startfile("alarm.py")

class Mainthread(QThread):
    def __init__(self):
        super(Mainthread,self).__init__()
    def run(self):
        self.takeCommand()
        self.taskexecution()

    def takeCommand(self):
        r = speech_recognition.Recognizer()
        with speech_recognition.Microphone() as source:
            print("Listening.....")
            r.pause_threshold = 1
            r.energy_threshold = 300
            audio = r.listen(source,0,4)

        try:
            print("Understanding..")
            query  = r.recognize_google(audio,language='en-in')
            print(f"You Said: {query}\n")
        except Exception as e:
            print("Say that again")
            return "None"
        return query

    def taskexecution(self):
        if __name__ == "__main__":
            while True:
                self.query = self.takeCommand().lower()
                if "wake up" in self.query:
                    from GreetMe import greetMe
                    greetMe()

                    while True:
                        self.query = self.takeCommand().lower()
                        if "go to sleep" in self.query:
                            speak("Ok sir , You can me call anytime")
                            break
                        elif "hello" in self.query:
                            speak("Hello sir, how are you ?")
                        elif "i am fine" in self.query:
                            speak("that's great, sir")
                        elif "how are you" in self.query:
                            speak("Perfect, sir")
                        elif "thank you" in self.query:
                            speak("you are welcome, sir")
                        elif "open" in self.query:
                            self.query = self.query.replace("open", "")
                            self.query = self.query.replace("jarvis", "")
                            pyautogui.press("super")
                            pyautogui.typewrite(self.query)
                            pyautogui.sleep(2)
                            pyautogui.press("enter")

                        elif "google" in self.query:
                            from SearchNow import searchGoogle
                            searchGoogle(self.query)
                        elif "youtube" in self.query:
                            from SearchNow import searchYoutube
                            searchYoutube(self.query)

                        elif "temperature" in self.query:
                            search = "temperature in Pune"
                            url = f"https://www.google.com/search?q={search}"
                            r = requests.get(url)
                            data = BeautifulSoup(r.text, "html.parser")
                            temp = data.find("div", class_="BNeawe").text
                            speak(f"current{search} is {temp}")
                        elif "weather" in self.query:
                            search = "weather in Pune"
                            url = f"https://www.google.com/search?q={search}"
                            r = requests.get(url)
                            data = BeautifulSoup(r.text, "html.parser")
                            temp = data.find("div", class_="BNeawe").text
                            speak(f"current{search} is {temp}")
                        elif "the time" in self.query:
                            strTime = datetime.datetime.now().strftime("%H:%M")
                            speak(f"Sir, the time is {strTime}")
                        elif "open" in self.query:
                            from Dictapp import openappweb
                            openappweb(self.query)
                        elif "close" in self.query:
                            from Dictapp import closeappweb
                            closeappweb(self.query)

                        elif "set an alarm" in self.query:
                            print("input time example:- 10 and 10 and 10")
                            speak("Set the time")
                            a = input("Please tell the time :- ")
                            alarm(a)
                            speak("Done,sir")
                        elif "pause" in self.query:
                            pyautogui.press("k")
                            speak("video paused")
                        #elif "play" in query:
                         #   pyautogui.press("k")
                          #  speak("video played")
                        elif "mute" in self.query:
                            pyautogui.press("m")
                            speak("video muted")

                        elif "volume up" in self.query:
                            from Keyboard import volumeup

                            speak("Turning volume up,sir")
                            volumeup()
                        elif "volume down" in self.query:
                            from Keyboard import volumedown

                            speak("Turning volume down, sir")
                            volumedown()
                        elif "remember that" in self.query:
                            rememberMessage = self.query.replace("remember that", "")
                            rememberMessage = self.query.replace("jarvis", "")
                            speak("You told me to remember that" + rememberMessage)
                            remember = open("Remember.txt", "a")
                            remember.write(rememberMessage)
                            remember.close()
                        elif "what do you remember" in self.query:
                            remember = open("Remember.txt", "r")
                            speak("You told me to remember that" + remember.read())

                        elif "play song"  in self.query:
                            speak("Playing your favourite songs, sir")
                            a = (1, 2, 3)
                            b = random.choice(a)
                            if b == 1:
                                webbrowser.open("https://www.youtube.com/watch?v=fcp2qLE7kAg")
                            elif b == 2:
                                webbrowser.open("https://www.youtube.com/watch?v=8JZjLxVnqVc")
                            elif b == 3:
                                webbrowser.open("https://www.youtube.com/watch?v=9LyMuLNOImg")
                        elif "news" in self.query:
                            from NewsRead import latestnews

                            latestnews()
                        elif "shutdown the system" in self.query:
                            speak("Are You sure you want to shutdown")
                            shutdown = input("Do you wish to shutdown your computer? (yes/no)")
                            if shutdown == "yes":
                                os.system("shutdown /s /t 1")

                            elif shutdown == "no":
                                break
                        elif "play a game"  in self.query:
                            from game import game_play
                            game_play()
                        elif "screenshot" in self.query:
                            import pyautogui

                            im = pyautogui.screenshot()
                            im.save("ss.jpg")
                        elif "click my photo" in self.query:
                            pyautogui.press("super")
                            pyautogui.typewrite("camera")
                            pyautogui.press("enter")
                            pyautogui.sleep(2)
                            speak("SMILE")
                            pyautogui.press("enter")
                        elif "translate" in self.query:
                            from Translator import translategl

                            self.query = self.query.replace("jarvis", "")
                            self.query = self.query.replace("translate", "")
                            translategl(self.query)
                        elif "calculate" in self.query:
                            from Calculatenumbers import Calc
                            from Calculatenumbers import WolfRamAlpha
                            self.query = self.query.replace("calculate", "")
                            self.query = self.query.replace("jarvis", "")
                            Calc(self.query)
                        elif "finally sleep" or "bye" in self.query:
                            speak("thanks for your precious time")
                            speak("Going to sleep sir")
                            exit()
startexecution=Mainthread()
class Main(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui=Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.startTask)
        self.ui.pushButton_2.clicked.connect(self.close)
    def startTask(self):
        self.ui.movie=QtGui.QMovie(r"C:\Users\ricos\Downloads\jarvisfullgui.gif")
        self.ui.label.setMovie(self.ui.movie)
        self.ui.movie.start()
        timer=QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(1000)
        startexecution.start()
    def showTime(self):
        ct=QTime.currentTime()
        cd=QDate.currentDate()
        lt=ct.toString('hh:mm:ss')
        ld=cd.toString(Qt.ISODate)
        self.ui.textBrowser.setText(ld)
        self.ui.textBrowser_2.setText(lt)


app=QApplication(sys.argv)
jarvis=Main()
jarvis.show()
exit(app.exec_())
